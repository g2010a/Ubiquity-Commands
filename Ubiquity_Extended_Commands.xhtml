<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>Ubiquity Extended Commands</title>
  <link rel="commands" href="Ubiquity_Extended_Commands.xhtml"/>
</head>
<style>
  div[id] {display: none}
  script {display: block; white-space: pre; font-family: monospace; color:gray;}
  ol item { display: block; white-space:pre; margin-top: 0.5em; margin-left:1em;}
</style>
<body>
<p>This XHTML feed contains extended commands for Mozilla's Ubiquity.</p>
<p>Get Ubiquity here: <a href="https://bitbucket.org/satyr/ubiquity/downloads/tip.xpi">https://bitbucket.org/satyr/ubiquity/downloads/tip.xpi</a></p>
<ol>
    <item>diaspora: Share the current page on Diaspora</item>
    <item>paste_passwords: Attempt to allow pasting into password fields in pages that have programmatically disallowed it</item>
    <item>plus: Share the current page on Google Plus</item>
    <item>textarea2editor: Triple-click a plain textarea to turn it into a Code Editor using the ACE Bookmarklet</item>
    <item>wishlist: Execute the Amazon Universal Wishlist bookmarklet</item>
    <item>Amazon.de: Searches Amazon.de for items matching your words.</item>
    <item>bigpicture: Previews Boston.com's The Big Picture (from RSS Feed)</item>
    <item>chart: Turn numeric data into charts using the Google Charts API</item>
    <item>color: Accepts a textual color code and previews it. Pressing enter inserts a small block of that color at the cursor.</item>
    <item>decode: Decodes URL-encoded text</item>
    <item>dict: Searches Dict.cc for a German/English term and loads results in the preview pane.</item>
    <item>dictes: Searches Dict.cc for a German/Spanish term and loads the results in the preview pane.</item>
    <item>encode: URL-encodes text</item>
    <item>fortune: Retrieves a Unix Fortune from the online service ihearquotes.com</item>
    <item>get-color: Grab colors from web pages</item>
    <item>lds: Searches LDS.org and loads results into the Preview pane.</item>
    <item>qrcode: Generates a QR Code with the specified text encoded.</item>
    <item>stock-chart: Displays a stock chart for the given ticker (from Yahoo! finance).</item>
    <item>text2html: Renders plain text as HTML.</item>
    <item>wolf: Searches WolframAlpha and loads results in to Preview pane.</item>    
</ol>
<!-- ============================================ -->
<!--	Template for Amazon Search                -->
<!-- ============================================ -->
<div id="amazon-search">
<style>
  ol, ul {list-style: none; margin: 0; padding: 0}
  img {float: right; margin: 0 0 0.5em 0.5em}
  kbd {vertical-align: middle; text-transform: uppercase}
  kbd:after {content: ":"}
  kbd, .price {font-weight: bolder}
  .item {margin-top: 0.4em; clear: right}
  .feature {margin-top: 0.2em}
  .price, .author, .label, .feature {font-size: 88%}
  .author:before {content: "by "}
  .feature:before {content: "\2022  "}
</style>
${matchMessage}
<ol>
{for item in items}
  <li class="item">
    {if item.image}
      <a href="${item.url}"><img src="${item.image.src}" border="0"
        height="${item.image.height}" width="${item.image.width}"/></a>
    {/if}
    <kbd>${item.key}</kbd>
    <a href="${item.url}" accesskey="${item.key}">${item.title}</a>
    {if item.price}
      <nobr class="price">
        ${item.price.amount} (${item.price.currency})
      </nobr>
    {/if}
    {if item.author}
      <div class="author">${item.author}</div>
    {/if}
    {if item.label}
      <div class="label">${item.label}</div>
    {/if}
    <ul>
    {for feature in item.features}
      <li class="feature">${feature}</li>
    {/for}
    </ul>
  </li>
{/for}
</ol>
</div>

<!-- ============================================ -->
<!--	Template for Big Picture				  -->
<!-- ============================================ -->
<div id="big-picture">
<style>
div.container { 
	font-size: 12px; 
	margin: 5px 0 35px 0;
	max-width: 470px;
}
.header { 
	background-color: #444;
	padding: 10px;
	border-radius: 10px 10px 0 0;
}
span.image {
	display:block;
	margin-top: 5px; 
	background-color: #444;
	border-radius: 0px 10px 10px 10px;
	padding: 10px;
}
img { border-radius: 10px; }
</style>
{for item in items}
    <div class='container'>
		<a href='${item.permalink}'>
			<span class='header'><span class='date'>${item.pubDate}</span> | ${item.title}</span>
			<br/><span class='image'>${item.image}</span>
		</a>
    </div>
{/for}
</div>

<script type="?" class="commands">
<![CDATA[
/**
 * Bookmarklets
 * Execute a variety of bookmarklets
 */
CmdUtils.makeBookmarkletCommand({
	names: ["diaspora", "Share on Diaspora"],
	icon: "http://joindiaspora.com/favico.ico",
	description: "Share the current page on Diaspora",
	url: "javascript:(function(){f='https://diasp.org/bookmarklet?url='+encodeURIComponent(window.location.href)+'&title='+encodeURIComponent(document.title)+'&notes='+encodeURIComponent(''+(window.getSelection?window.getSelection():document.getSelection?document.getSelection():document.selection.createRange().text))+'&v=1&';a=function(){if(!window.open(f+'noui=1&jump=doclose','diasporav1','location=yes,links=no,scrollbars=no,toolbar=no,width=620,height=250'))location.href=f+'jump=yes'};if(/Firefox/.test(navigator.userAgent)){setTimeout(a,0)}else{a()}})()"
})

CmdUtils.makeBookmarkletCommand({
	names: ["paste_passwords", "Allow Password Pasting"],
	description: "Attempt to allow pasting into password fields in pages that have programmatically disallowed it",
	url: "javascript:(function(){var%20inputs=document.getElementsByTagName('input');for(var%20i=0;i<inputs.length;i++){if(inputs[i].getAttribute('type').toLowerCase()==='password'){inputs[i].setAttribute('onpaste','');}}})();"
})

CmdUtils.makeBookmarkletCommand({	
	names: ["plus", "Share on Google+"],
	icon: "https://www.gstatic.com/images/icons/gplus-64.png",
	description: "Share the current page on Google Plus",
	url: "javascript:void(window.open('https://plus.google.com/share?ur\l='+encodeURIComponent(location),%20'Share%20to%20Google+','width=600,height=460,menubar=no,location=no,status=no'))"
})

CmdUtils.makeBookmarkletCommand({
	names: ["textarea2editor"],
    icon: "http://ajaxorg.github.com/ace/doc/site/images/ace-tab.png",
	description: "Triple-click a plain textarea to turn it into a Code Editor using the ACE Bookmarklet",
    url: 'javascript:(function%20inject(callback)%20{%20var%20baseUrl="http://ajaxorg.github.com/ace-builds/textarea/src/";%20var%20load%20=%20window.__ace_loader__%20=%20function(path,%20module,%20callback)%20{%20var%20head%20=%20document.getElementsByTagName("head")[0];%20var%20s%20=%20document.createElement("script");%20s.src%20=%20baseUrl%20+%20path;%20head.appendChild(s);%20s.onload%20=%20function%20()%20{%20window.__ace_shadowed__.require([module],%20callback);%20};%20};%20load("ace-bookmarklet.js",%20"ace/ext/textarea",%20function%20()%20{%20var%20ace%20=%20window.__ace_shadowed__;%20ace.options%20=%20{%20mode:"javascript",theme:"merbivore",gutter:"true",fontSize:"12px",softWrap:"off",keybindings:"ace",showPrintMargin:"false",useSoftTabs:"true",showInvisibles:"false"%20};%20var%20Event%20=%20ace.require("ace/lib/event");%20var%20areas%20=%20document.getElementsByTagName("textarea");%20for%20(var%20i%20=%200;%20i%20<%20areas.length;%20i++)%20{%20Event.addListener(areas[i],%20"click",%20function%20(e)%20{%20if%20(e.detail%20==%203)%20{%20ace.transformTextarea(e.target,%20load);%20}%20});%20}%20callback%20&&%20callback();%20});})()'
})

CmdUtils.makeBookmarkletCommand({
	names: ["wishlist", "Amazon universal wishlist"],
	description: "Execute the Amazon Universal Wishlist bookmarklet",
	url: "javascript:(function(){var%20w=window,l=w.location,d=w.document,s=d.createElement('script'),e=encodeURIComponent,x='undefined',u='http://www.amazon.com/wishlist/add';if(typeof%20s!='object')l.href=u+'?u='+e(l)+'&t='+e(d.title);function%20g(){if(d.readyState&&d.readyState!='complete'){setTimeout(g,200);}else{if(typeof%20AUWLBook==x)s.setAttribute('src',u+'.js?loc='+e(l)),d.body.appendChild(s);function%20f(){(typeof%20AUWLBook==x)?setTimeout(f,200):AUWLBook.showPopover();}f();}}g();}())"
})

/** ************************************************************************************************
 * Amazon.de
 * Search amazon.de
 * *********************************************************************************************** */
// Clone of amazon.com for amazon.de
var AmazonDE = "http://www.amazon.de/";
var AmazDeLink = "Amazon.de".link(AmazonDE);
var noun_type_amazon_de_index = CmdUtils.NounType("index", {
  All: 0,
  Apparel: 15683091,
  Automotive: 15690151,
  Baby: 3760931,
  Beauty: 11055981,
  Books: 1000,
  Classical: 301668,
  DigitalMusic: 301668,
  DVD: 130,
  Electronics: 493964,
  GourmetFood: 3580501,
  Grocery: 10746371,
  HealthPersonalCare: 3760931,
  HomeGarden: 1063498,
  Industrial: 228013,
  Jewelry: 3880591,
  Kitchen: 1063498,
  Magazines: 44264011,
  Merchants: 493964,
  Miscellaneous: 349028011,
  Music: 301668,
  MusicalInstruments: 12923151,
  OfficeProducts: 1084128,
  OutdoorLiving: 1063498,
  PCHardware: 493964,
  PetSupplies: 13900811,
  Photo: 13900861,
  Shoes: 3375301,
  Software: 409488,
  SportingGoods: 1036682,
  Tools: 228013,
  Toys: 130,
  VHS: 404272,
  Video: 130,
  VideoGames: 44263011,
  Watches: 378516011,
  Wireless: 408234,
  WirelessAccessories: 408234,
}, "All");
var AWS_ENDPOINT = "ecs.amazonaws.de";
var AWS_REQUESTURI = "/onca/xml";
// This key is linked to Blair McBride's AWS account - and only free services are enabled.
// Please don't re-use it or abuse it. Instead, get your own AWS key - its free.
var AWS_KEY = "08WX39XKK81ZEWHZ52R2";
var AWS_SECRET = "w0WOQNS+GZcJWjrAmlK885tFi6rcrr9WOgeu6eK3";

function amazon_doEscape(aString) (
  encodeURIComponent(aString)
  .replace(/[!\'()*]+/g, function escape0(s) escape(s, 0)));
function amazon_signRequest(aParams) {
  var key;
  var params = {};
  for (key in aParams)
    params[key] = aParams[key];
  params.Timestamp = new Date().toISOString().slice(0, -5) + "Z";
  params.AWSAccessKeyId = AWS_KEY;
  var paramArray = [];
  for (key in params)
    paramArray.push(amazon_doEscape(key) + "=" + amazon_doEscape(params[key]));
  paramArray.sort();
  var paramString = paramArray.join("&");
  var sigBaseString =
    "GET\n" + AWS_ENDPOINT + "\n" + AWS_REQUESTURI + "\n" + paramString;
  var signature = Utils.signHmac("SHA256", AWS_SECRET, sigBaseString);
  return ("http://" + AWS_ENDPOINT + AWS_REQUESTURI + "?" +
          paramString + "&Signature=" + amazon_doEscape(signature));
}

CmdUtils.CreateCommand({
  names: ["Amazon.de"],
  icon: "chrome://ubiquity/skin/icons/amazon.ico",
  author: {name:"Modified for .de by g2010a"},
  description: "Searches " + AmazDeLink + " for items matching your words.",
  help: '<dl><dt>Available Indices</dt><dd><b>'+
    noun_type_amazon_de_index._list.reduce(function (dd, s) {
      return dd + s.text + ' '
    }, '')
  +'</b></dd></dl>',
  arguments: [
    {role: "object", nountype: noun_arb_text, label: "search term"},
    {role: "format", nountype: noun_type_amazon_de_index}],
  execute: function amazon_execute({object: {text}, format: {data}}) {
    Utils.openUrlInBrowser(
      AmazonDE + "s/ref=nb_ss_gw" +
      Utils.paramsToString({url: "node=" + data, "field-keywords": text}));
  },
  preview: function(previewBlock,
                    {object: {text, summary}, format: {text: searchIndex}}) {
    if (!text) return void this.previewDefault(previewBlock);

    var me = this;
    previewBlock.innerHTML =
      _("Searching ${AmazDeLink} for items matching <b>${query}</b>.",
        {AmazDeLink: AmazDeLink, query: summary});
    CmdUtils.previewAjax(previewBlock, {
      url: amazon_signRequest({
        Service: "AWSECommerceService",
        Version: "2008-08-19",
        Operation: "ItemSearch",
        Condition: "All",
        Merchant: "All",
        ResponseGroup: "ItemAttributes,Images",
        AssociateTag: "matyr-22", // required
        SearchIndex: searchIndex,
        Keywords: text,
      }),
      dataType: "xml",
      error: function amazon_error(xhr, info) {
        previewBlock.innerHTML = (
          "<p class='error'>" +
          _("Error searching ${AmazDeLink}.", {AmazDeLink: AmazDeLink}) +
          "<br/><em>" + xhr.status + " " + xhr.statusText +
          " (" + info + ")</em></p>");
        // TODO: think of a better way to localize API errors, if possible.
      },
      success: function amazon_success(responseData) {
        responseData = jQuery(responseData);
        var errorMessage = responseData.find("Error > Message").text();
        if (errorMessage) {
          previewBlock.innerHTML =
            "<p class='error'>" + _(errorMessage) + "</p>";
          return;
        }
        const MAX_RESULTS = 35; // 1 ~ 9, a ~ z
        function iter(itemIndex) {
          var itemDetails = jQuery(this),
          itemAttrs = itemDetails.find("ItemAttributes"),
          listPrice = itemAttrs.find("ListPrice"),
          smallImage = itemDetails.find("SmallImage:first");
          return {
            title: itemAttrs.find("Title").text(),
            url: itemDetails.find("DetailPageURL").text(),
            key: (itemIndex + 1).toString(MAX_RESULTS + 1),
            author: (itemAttrs.find("Author")
                     .map(function() this.textContent).get().join(', ')),
            features: (itemAttrs.find("Feature")
                       .map(function() this.textContent).get()),
            label: itemAttrs.find("Label").text(),
            price: listPrice.length && {
              amount: listPrice.find("FormattedPrice").text(),
              currency: listPrice.find("CurrencyCode").text(),
            },
            image: smallImage.length && {
              src: smallImage.find("URL").text(),
              height: smallImage.find("Height").text(),
              width: smallImage.find("Width").text(),
            }
          };
        }
        previewBlock.innerHTML = CmdUtils.renderTemplate(
          feed.dom.getElementById("amazon-search").innerHTML,
          { items: (responseData.find("Items > Item").slice(0, MAX_RESULTS)
                    .map(iter).get()),
            matchMessage: _(
              ("Found <b>${numitems}</b> item{if numitems > 1}s{/if} on " +
               "<a href='http://www.amazon.de/'>Amazon.de</a> " +
               "matching <b>${query}</b>."),
              { numitems: responseData.find("Items > TotalResults").text(),
                query: text }) });
      }
    });
  }
});

/** ************************************************************************************************
 * Big Picture
 * Previews Boston.com's The Big Picture
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
    names: ['bigpicture'],
    icon: 'http://www.boston.com/favicon.ico',
    homepage: '',
    author: {name:'g2010a'},
    description: 'Previews Boston.com\'s The Big Picture (from RSS Feed)',
    preview: function(pblock, input){
        var xmlurl = 'http://feeds.boston.com/boston/bigpicture/index'
        CmdUtils.previewGet(pblock, xmlurl, null, 
            function(data) {
                // data is an xml document
                var items = []
                jQuery(data).find('item').map(function(i,d) {
                    var desc = jQuery("<div>").html( jQuery(d).find('description').text() ),
                        imgobj = jQuery( jQuery('.bpImage', desc)[0] )
                        imgobjw = imgobj.width()
                        imgobjh = imgobj.height()
                    items.push({
                        title: jQuery(d).find('title').text(),
                        link: jQuery(d).find('link').text(),
                        description: desc.html(),
                        pubDate: new Date(jQuery(d).find('pubDate').text()).toString('yyyy-MM-dd'),
                        permalink: jQuery(d).find('guid').text(),
                        image: imgobj.width(450).height( imgobjh * 450 / imgobjw )[0].outerHTML
                    })
                })
                
                var html = ""
                pblock.innerHTML = CmdUtils.renderTemplate(
                    feed.dom.getElementById("big-picture").innerHTML,
                    { items: items }
                )
            }
        )
    }
})

/** ************************************************************************************************
 * Graphs pie, bar, and line charts.
 * Updated to the new parser by Ammad http://github.com/ammad
 * Extended to use different decimal separators by g2010a
 * *********************************************************************************************** */
var decsep = ".";
var colors = "&chco=94B6D2,D6AA20,759E00,D8773A,007777,B53A3A,713871,4A6E21,979000",
    //"&chco=7979B2,C6C6FF,E0E0FF,B2A567,FFF5C6";
    noun_type_chart = new CmdUtils.NounType( "chart",
      ["pie", "bar", "line", "tline"], "pie"
    ),
    noun_type_width_height = new CmdUtils.NounType( "width[xheight]",
      /^\d+(x\d+)?$/, "400x200"
    ),
	noun_type_decimal_separator = new CmdUtils.NounType( "separator",
      [".", ","], "."
    );
 
function to_num(text){
  if(decsep == ",") text = text.replace(".","").replace(",",".");
  return +text.replace(/[^\d\.]/g,"")
}

/**
 * retrieves selected table from DOM
 */
function getTable(selection){
  var table = {
    firstrow: selection.getRangeAt(0).startContainer,
    lastrow: selection.getRangeAt(selection.rangeCount-1).endContainer
  };
  // for single (non-ctrl) selections
  if (selection.rangeCount == 1) {
    table = {
      firstcell: jQuery(table.firstrow).closest("td,th")[0],
      lastcell: jQuery(table.lastrow).closest("td,th")[0],
      firstrow: jQuery(table.firstrow).closest("tr")[0],
      lastrow: jQuery(table.lastrow).closest("tr")[0]
    }
  };
  if (!table.lastrow) return;
  table.rows = table.lastrow.rowIndex - table.firstrow.rowIndex + 1;
  if (selection.rangeCount > 1) {
    table.columns = selection.rangeCount/table.rows;
    var text = selection.getRangeAt(0).toString();
    jQuery(table.firstrow.children).each(
      function(){
        table.firstcell = this;
        return !!this.textContent.search(text)
      });
    text = selection.getRangeAt(selection.rangeCount-1).toString();
    table.lastcell = table.lastrow.children[table.columns + table.firstcell.cellIndex - 1];
    if (table.lastcell.textContent == text) return table;
    jQuery(table.lastrow.children).each(
      function(){
        table.lastcell = this;
        return !!this.textContent.search(text)
      });
  }
  return table;
}

/**
 * Returns an array of the actual text in the cells 
 */
function tableToArray(table){
  if ( table.firstrow ) var info = table;
  var table = $( table.firstrow || table ).closest("table");
  if ( table.length == 0 ) return;
  return table.find("tr").map(
    function(i){
      if ( info && ( i < info.firstrow.rowIndex ||
                     i > info.lastrow.rowIndex )) return null;
      return $(this.children).map(
        function(j){
          if ( info && ( j < info.firstcell.cellIndex ||
                     j > info.lastcell.cellIndex )) return null;
          return $(this).text()
        })
    })
}
 
/**
 * Returns an object with labels and other relevant data; transforms cells into numbers.
 */
function graphObj(tableData){
  var rows = tableData.length;
  var columns = tableData[0].length;
 
  var data = {
    labels: new Array(rows),
    values: new Array(rows),
    min: Number.MAX_VALUE,
    max: Number.MIN_VALUE,
    string: tableData
  }
  
  // copy the first column into a array of labels, rest into 2 dimensional array of values
  for(i=0; i<rows; i++) {
	// create generic labels if only 1 column is selected
	if (columns == 1) {
		data.labels[i] = i;
		data.values[i] = new Array(1)
		data.values[i][0] = to_num(tableData[i][0]);
	    if (data.values[i][0]<data.min) data.min = data.values[i][0];
		if (data.values[i][0]>data.max) data.max = data.values[i][0];

	}
	else {
		data.labels[i] = tableData[i][0];
		data.values[i] = new Array(columns-1);
		for (var j=1;j<columns; j++){
		  data.values[i][j-1] = to_num(tableData[i][j]);
		  if (data.values[i][j-1]<data.min) data.min = data.values[i][j-1];
		  if (data.values[i][j-1]>data.max) data.max = data.values[i][j-1];
		}
	}
  }
 
  return data;
}
 
 
function transposeArray(inArray){
  var rowsIn = inArray.length;
  var columnsIn = inArray[0].length;
  var outArray = new Array(columnsIn);
 
  for(i=0; i<columnsIn; i++) {
    outArray[i] = new Array(rowsIn);
    for (var j=0;j<rowsIn; j++){
      outArray[i][j] = inArray[j][i];
    }
  }
  return outArray;
}
 
function formatValues(valArray) {
  var rows = valArray.length;
  var columns = valArray[0].length;
  var values = "";
 
  //  traverse table by columns to build values: delimit columns with commas, rows with pipes
  for (var i=0; i<columns; i++){
    for (var j=0;j<rows; j++){
      values += (valArray[j][i]);
      if (j<rows-1) values += ",";
    }
    if (i<columns-1) values += "|";
  }
  return values;
}
 
function formatLabels(labArray){
  var rows = labArray.length;
  var labels = "";
  for(var i=0; i<rows; i++){
    // add element to label string
    labels += labArray[i];
    // if not last row, add a pipe delimiter
    if (i<rows-1) labels += "|";
  }
  return labels;
}
  
function scaleTo100(valArray, maxVal){
  var rows = valArray.length;
  var columns = valArray[0].length;
  var rescale = maxVal / 100;
 
  //  traverse table by columns to build values: delimit columns with commas, rows with pipes
  for (var i=0; i<columns; i++){
    for (var j=0;j<rows; j++){
      valArray[j][i] = valArray[j][i] / rescale;
    }
  }
  return valArray;
}
 
function  dataToChart( args ) {
  var data, table = getTable( CmdUtils.getWindow().getSelection() );
  decsep = args.instrument.text;
  if (table)
    data = graphObj(tableToArray(table));
 
  if( !data ) return null;
  
  data.labelquery = formatLabels(data.labels);
  // pie charts only handle values up to 100, so scale them!
  if( args.format.text == "pie" )
    data.values = scaleTo100(data.values, data.max);
  else if ( args.format.text == "tline" ) {
    data.values = transposeArray(data.values);
    args.format.text = "line";
  }
  data.valuequery = formatValues(data.values);
 
  [ graphWidth, graphHeight ] = args.modifier.text.split("x");
 
  var graphWidth = graphWidth || 400,
      graphHeight = graphHeight || graphWidth /2;
 
  if (graphHeight > 387) graphHeight = 387;
  if (graphWidth > 774) graphWidth = 774;
 
  if ( args.format.text == "bar" ) {
    var ymin = (data.min * 0.75);
    if (ymin < 10) ymin = 0;
    if (data.max > 80 && data.max < 100) data.max = 100;
  }else if ( args.format.text == "line" )
    var ymin = (data.min - (data.max - data.min) * .1);
  
  var urlstart = ({ 
        pie:"pc",
        bar:"bvg&chxt=y&chbh=a",
        line:"lc&chxt=y"
      })[args.format.text],
 
      urlend = ({ 
        pie:"",
        bar:colors,
        line:colors
      })[args.format.text];
 
  img = "<img src='http://chart.earth2marsh.apigee.com/chart?cht="+urlstart+"&chs="+graphWidth+"x"+graphHeight+"&chl="+data.labelquery+"&chd=t:"+data.valuequery+"&chds="+ymin+","+data.max+"&chtxt=x,y&chxr=0,"+ymin+","+data.max+urlend+"'/>";
  return img;
 
}
 
CmdUtils.CreateCommand({
  names: ["chart"],
  arguments: [ {role: "object", nountype: noun_arb_text, label: "Column of labels and column(s) of values"},
               {role: "format", nountype: noun_type_chart},
               {role: "modifier", nountype: noun_type_width_height},
			   {role: "instrument", nountype: noun_type_decimal_separator}
             ],
  icon: "chrome://ubiquity/skin/icons/calculator.png",
  description: "Turn numeric data into charts using the Google Charts API.",
  help: "Select a table. Chart types supported: pie, bar, line and tline(transposed line graph). Decimal separators: \".\" and \",\"<p>Example: <em>Chart in Line of 500x500 with ,</em></p>",
  homepage: "http://earth2marsh.com/ubiquity/",
  author: {name: "Marsh Gardiner", email: "ubiquity@earth2marsh.com"},
  license: "MPL",
  preview: function(pblock, args) {
    if (!args.object.html) {
      this.previewDefault(pblock);
      return;
    }
    var img = dataToChart( args );
 
 
    if( !img )
      jQuery(pblock).text( "Requires numbers to graph." );
    else
      jQuery(pblock).empty().append( img ).height( "15px" );
  },
 
  execute: function( args ) {
    var img = dataToChart( args );
    if( img ) CmdUtils.setSelection( img );
  }
})



/** ************************************************************************************************
 * Color
 * Preview a textual color code
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["color", "preview-color"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://kuler.adobe.com/favicon.ico",
  homepage: "https://gist.github.com/1100536",
  author: {name:"g2010a"},
  description: "Accepts a textual color code and previews it. Pressing enter inserts a small block of that color at the cursor.",
  preview: function(pblock, input) {
		// todo: intelligent recognition of format
		var color = jQuery.trim(input.object.text);
		if (color.length < 7) color = "#"+color;
	    var html = "<div style='width:120px;height:120px;padding:80px;background-color:white'>"
			+ "<div style='width:100%;height:100%;background-color:" + color + "'></div>"
		"</div>"
        pblock.innerHTML = html;
  },
  execute: function(input) {
	var color = input.object.text;
	if (color.length < 7) color = "#"+color;
	CmdUtils.setSelection("<div style='width:12px;height:12px;display:inline-block;background-color:" + color + ";'></div>")
  }
})

/** ************************************************************************************************
 * Decode
 * Decode URLs
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["decode"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://meyerweb.com/favicon.ico",
  author: {name:"g2010a"},
  homepage: "https://gist.github.com/1100536",
  description: "Decodes URL-encoded text",
  preview: function(pblock, input) {
        pblock.innerHTML = decodeURIComponent(input.object.text.replace(/\+/g,  " "));
  },
  execute: function(input) {
		CmdUtils.setSelection(decodeURIComponent(input.object.text.replace(/\+/g,  " ")));
  }
})

/** ************************************************************************************************
 * Dict
 * Translate German / English
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["dict"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://www.dict.cc/favicon.ico",
  homepage: "https://gist.github.com/1100536",
  author: {name:"g2010a"},
  description: "Searches Dict.cc for a German/English term and loads results in the preview pane.",
  preview: function(pblock, input) {
    CmdUtils.previewGet(pblock,
      'http://pocket.dict.cc/?s=' + input.object.text,
      null,
      function(data){
        var resultStart = data.indexOf('<div align="center" style="background-color:#36c;color:white;padding:2px">',0);
        var beginPos = data.indexOf("<dt>", resultStart);
        var endPos = 0;
        var html = ""
        while(beginPos != -1){
          endPos = data.indexOf("</dd>", beginPos);
          html = html + "<br>" + data.substring(beginPos, endPos);
          beginPos = data.indexOf("<dt", endPos);
        }   
        pblock.innerHTML = CmdUtils.absUrl(html,"http://www.dict.cc/");
      }
    );
  },
  execute: function(args) {
    var input = args.object;
    var url = "http://www.dict.cc/?s={QUERY}"
    var urlString = url.replace("{QUERY}", encodeURIComponent(input.text));
    Utils.openUrlInBrowser(urlString);
  }
})

/** ************************************************************************************************
 * Dictes
 * Translate German / Spanish
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["dictes","dees"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://www.dict.cc/favicon.ico",
  homepage: "https://gist.github.com/1100536",
  author: {name:"g2010a"},
  description: "Searches Dict.cc for a German/Spanish term and loads the results in the preview pane.",

  preview: function(pblock, input) {
    CmdUtils.previewGet(pblock,
      'http://dees.pocket.dict.cc/?s=' + input.object.text,
      null,
      function(data){
        var resultStart = data.indexOf('<div align="center" style="background-color:#36c;color:white;padding:2px">',0);
        var beginPos = data.indexOf("<dt>", resultStart);
        var endPos = 0;
        var html = ""
        while(beginPos != -1){
          endPos = data.indexOf("</dd>", beginPos);
          html = html + "<br>" + data.substring(beginPos, endPos);
          beginPos = data.indexOf("<dt", endPos);
        }   
        pblock.innerHTML = CmdUtils.absUrl(html,"http://dees.dict.cc/");
      }
    );
  },
  execute: function(args) {
    var input = args.object;
    var url = "http://dees.dict.cc/?s={QUERY}"
    var urlString = url.replace("{QUERY}", encodeURIComponent(input.text));
    Utils.openUrlInBrowser(urlString);
  }
})

/** ************************************************************************************************
 * Encode
 * Encode URLs
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["encode"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://meyerweb.com/favicon.ico",
  author: {name:"g2010a"},
  homepage: "https://gist.github.com/1100536",
  description: "URL-encodes text",

  preview: function(pblock, input) {
        pblock.innerHTML = encodeURIComponent(input.object.text);
  },
  execute: function(input) {
		CmdUtils.setSelection(encodeURIComponent(input.object.text));
  }
})

/** 
 * Fortune
 * Gets a fortune cookie
 */
// TODO: accept optional length (short,long) and source category
//TODO: paste HTML if in a page, TEXT if in a textarea
CmdUtils.CreateCommand({
  names: ["fortune", "fortune-cookie", "quote"],
  arguments: [],
  icon: "http://www.iheartquotes.com//images/favicon.png",
  homepage: "https://gist.github.com/1100536",
  author: {name:"g2010a"},
  description: "Retrieves a Unix Fortune from the online service ihearquotes.com",
  fortune_text: null,
  preview: function(pblock, {object, source}) {
	//pblock.innerHTML = 'retrieving ...';
	var url = 'http://www.iheartquotes.com/api/v1/random?format=text&show_permalink=false&show_source=false';
	//CmdUtils.log('hi', object, source)
    CmdUtils.previewGet(pblock, url, null,
      function(data){
		this.fortune_text = data;
        pblock.innerHTML = this.fortune_text;
      }
    );
  },
  execute: function(args) {
    CmdUtils.setSelection(this.fortune_text)
  }
})

/** ************************************************************************************************
 * Ubiquity "grab-color" color grabbing command, v1.0
 * by Jacob Seidelin, jseidein@nihilogic.dk, http://blog.nihilogic.dk/
 * Updated and modified by g2010a
 * *********************************************************************************************** */

CmdUtils.CreateCommand({ 
  names: ["get-color", "grab-color", "color-get"],
  icon: "http://www.nihilogic.dk/favicon.ico",
  homepage: "http://blog.nihilogic.dk/",
  author: { name: "Jacob Seidelin", email: "jseidelin@nihilogic.dk"},
  description: "Grab colors from web pages",
  arguments: [{role:"format", label:"mode",nountype: noun_arb_text}],
  preview: function( pblock, input ) {
    var template = "Click anywhere on the page to pick up a color.<br/>Mode is either \"hex\" or \"rgb\" (defaults to \"hex\").";
    pblock.innerHTML = CmdUtils.renderTemplate(template);
  },
  execute: function(input) {
    var mode = jQuery.trim(input.format.text),
        rgb = (mode == "rgb"),
        win = CmdUtils.getWindowInsecure(),
        doc = CmdUtils.getDocumentInsecure()

    if (doc.getElementById("pixastic-color-picker-image")) 
      return;

    var hWin = CmdUtils.getHiddenWindow(),
        shot = hWin.document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
        width = win.innerWidth,
        height = win.innerHeight
    shot.mozOpaque = true;
    shot.width = width;
    shot.height = height;
    shot.getContext("2d").drawWindow(win, win.scrollX, win.scrollY, width, height, "rgb(255,255,255)");

    var img = doc.createElement("img");
    img.style.position = "absolute";
    img.style.zIndex = 0x7fffffff;
    img.style.padding = img.margin = "0px";
    img.style.border = "none";
    img.style.left = win.scrollX + "px";
    img.style.top = win.scrollY + "px";
    img.style.cursor = "crosshair";
    img.id = "pixastic-color-picker-image";

    img.src = shot.toDataURL("image/png");

    var box = doc.createElement("div");
    box.style.width = "150px";
    box.style.height = "15px";
    box.style.border = "1px solid black";
    box.style.color = "black";
    box.style.fontFamily = "helvetica, sans-serif";
    box.style.fontSize = "12px";
    box.style.backgroundColor = "rgba(255,255,255,0.7)";
    box.style.position = "absolute";
    box.style.zIndex = 0x7fffffff;

    var overflow = doc.body.style.overflow;
    doc.body.style.overflow = "hidden";
    doc.body.appendChild(img);
    doc.body.appendChild(box);

    var hex = function(n) {
      var h = n.toString(16);
      if (h.length == 1) h = "0" + h;
      return h;
    }

    img.onmousemove = function(e) {
       var data = shot.getContext("2d").getImageData(e.clientX, e.clientY, 1, 1).data;
       var color = rgb ? "rgb(" + data[0] + "," + data[1] + "," + data[2] + ")"
           : "#" + hex(data[0]) + hex(data[1]) + hex(data[2]);
       box.innerHTML = "Color: " + color;
       box.style.left = (e.clientX + win.scrollX + 10) + "px";
       box.style.top = (e.clientY + win.scrollY + 10) + "px";
    }

    img.onclick = function(e) {
       doc.body.removeChild(img);
       doc.body.removeChild(box);
       doc.body.style.overflow = overflow;
       var data = shot.getContext("2d").getImageData(e.clientX, e.clientY, 1, 1).data;
       var color = rgb ? "rgb(" + data[0] + "," + data[1] + "," + data[2] + ")"
           : "#" + hex(data[0]) + hex(data[1]) + hex(data[2]);
       win.prompt("Your selected color is", color);
    }
    //TODO: abort with ESC
  }
})

/** ************************************************************************************************
 * Lds
 * Search lds.org 
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["lds"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://www.lds.org/favicon.ico",
  homepage: "http://www.lds.org",
  author: {name:"g2010a"},
  description: "Searches LDS.org and loads results into the Preview pane.",

  preview: function(pblock, input) {
    CmdUtils.previewGet(pblock,
      'http://www.lds.org/search?lang=eng&query='+input.object.text,
      null,
      function(data){
        var html = ""
        $(".results-list>li",data).each(function(i,d){ 
          var headings = $('h3',d);
          var newheadings = $('<p></p>').append(headings.html());
		  headings.replaceWith(newheadings);
		  var lists = $('ul.meta>li',d);
          var newlists = $('<span></span>').append(lists.text());
          lists.replaceWith(newlists);
          if ($(d).html().trim() != "") html = html+ "<hr/>" + $(d).html()
        })
        pblock.innerHTML = html;
      }
    );
  },
  execute: function(args) {
    var input = args.object;
    var url = "http://www.lds.org/search?lang=eng&query={QUERY}"
    var urlString = url.replace("{QUERY}", encodeURIComponent(input.text));
    Utils.openUrlInBrowser(urlString);
  }
})


/** ************************************************************************************************
 * qrcode
 * Generates a QR Code with the specified text encoded
 * previously used Google Charts API (to be deprecated by Google)
 * previously used https://github.com/nhorvath/Ubiquity-QRCode
 * currently uses qrserver.com api
 * *********************************************************************************************** */
// FIXME: Quite buggy
CmdUtils.CreateCommand({
  names: ["qrcode", "qr"],
  arguments: [{role:"object",label:"input",nountype:noun_arb_text}],
  author: {name:"g2010a"},
  icon: "http://api.qrserver.com/v1/create-qr-code/?data=q&size=32x32",
  description: "Generates a QR Code with the specified text encoded.",
  __baseurl: "http://api.qrserver.com/v1/create-qr-code/?data={QUERY}&size=400x400",
  preview: function(pblock, args) {
	var input = args.object
    pblock.innerHTML = "<img src='" + this.__baseurl.replace("{QUERY}", encodeURIComponent(input.text)) +"'/>"
  },
  execute: function(args) {
    var input = args.object;
    var urlString = this.__baseurl.replace("{QUERY}", encodeURIComponent(input.text));
    Utils.openUrlInBrowser(urlString);
  }
});



/** ************************************************************************************************
 * stock-chart
 * Get a stock chart
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
    names: ["stock-chart"],
    homepage: "http://hoffstein.net/ubiquity/stock-chart.html",
    author: { name: "Ben Hoffstein", email: "ben@hoffstein.net" },
    license: "MPL",
    description: "Displays a stock chart for the given ticker (from Yahoo! finance).",
    arguments: [{ role:'object', nountype: noun_arb_text, label: 'input' }],
    preview: function(pblock, args) {
		var input = args.object
        var searchText = jQuery.trim(input.text);
        if (searchText.length < 1) {
            pblock.innerHTML = "Retrieves stock chart for ticker";
            return;
        }
		var url = "http://chart.finance.yahoo.com/z?s={QUERY}";
        var query = jQuery.trim(searchText);
        var urlString = url.replace("{QUERY}", encodeURIComponent(query))
		pblock.innerHTML = "1D <br/><img src='"+urlString+"&t=1d&q=l&l=off&z=s&p=m30,m200'/>"
                        + "<br/>6M <br/><img src='"+urlString+"&t=6m&q=l&l=off&z=s&p=m30,m200'/>"
						+ "<br/>3 YR<br/><img src='"+urlString+"&t=3y&q=l&l=off&z=s&p=m30,m200'/>";
    },
	
  execute: function(args) {
    var input = args.object;
    var url = "http://finance.yahoo.com/q?s={QUERY}&ql=0"
    var urlString = url.replace("{QUERY}", encodeURIComponent(input.text));
    Utils.openUrlInBrowser(urlString);
  }
})

/** ************************************************************************************************
 * Text2Html
 * Render plain text as html
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["text2html", "html","render html"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: null,
  homepage: "https://gist.github.com/1100536",
  author: {name:"g2010a"},
  description: "Renders plain text as HTML.",
  
  preview: function(pblock, input) {
        pblock.innerHTML = decodeURIComponent(input.object.text);
  },
  execute: function(input) {
		CmdUtils.setSelection(input.object.text);
  }
})

/** ************************************************************************************************
 * wolf
 * wolfram|alpha with dynamic preview
 * *********************************************************************************************** */
CmdUtils.CreateCommand({
  names: ["wolf", "wolfram", "wolframalpha", "wolfram alpha"],
  arguments: [{role:"object", label:"input",nountype: noun_arb_text}],
  icon: "http://www.wolframalpha.com/favicon.ico",
  homepage: "https://gist.github.com/1100536",
  author: {name:"g2010a"},
  description: "Searches WolframAlpha and loads results in to Preview pane.",

  preview: function(pblock, input) {
    CmdUtils.previewGet(pblock,
      'http://www.wolframalpha.com/widget/input/?input='+input.object.text+'&id=d1506f31ac81b12a37f93ca40a79515&showAssumptions=0',
      null,
      function(data){
        var html = "<div style='background-color: #fff; color:#000; padding-left: 6px; border-radius: 10px; margin-right: 4px;'>"
        jQuery("div.pod",data).each(function(i,d){ 
          jQuery("a",d).replaceWith("<span style='font-size:smaller; color:#ccc'>[link removed]</span>")
          jQuery("hr",d).remove()
          var headings = jQuery('h2',d);
          var newheadings = jQuery('<p></p>').append(headings.text());
          headings.replaceWith(newheadings);
          if (jQuery(d).html().trim() != "") html = html+ "<hr/>" + jQuery(d).html()
          else html = html + "<hr/> [this section can't be loaded]"
        })
        //html = data;
        html = html + "</div>"
        pblock.innerHTML = html;
      }
    );
  },
  execute: function(args) {
    var input = args.object;
    var url = "http://www.wolframalpha.com/input/?i={QUERY}"
    var urlString = url.replace("{QUERY}", encodeURIComponent(input.text));
    Utils.openUrlInBrowser(urlString);
  }
})

]]>
</script>
</body>
</html>